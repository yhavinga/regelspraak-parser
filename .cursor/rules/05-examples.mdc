---
description: Example RegelSpraak v2.1.0 code snippets for testing and verifying the ANTLR grammar and execution engine
globs: ["*.g4", "examples/**/*.rs", "examples/**/*.py"]
alwaysApply: false
---
# RegelSpraak v2.1.0 - Examples

**Purpose:**
Provide concrete examples of RegelSpraak code (`.rs` files) and accompanying Python scripts.

1.  **Grammar Verification:** Illustrate how the defined ANTLR lexer and parser rules should match various RegelSpraak constructs. Use these to test and verify the grammar (`.g4` file).
2.  **Execution Engine Demonstration:** Provide complete, runnable examples (like the TOKA case) that use the parser (`src/regelspraak`), the execution engine (`src/regelspraak_engine`), and demonstrate the end-to-end process of parsing, interpreting, and simulating RegelSpraak rules.

**File Patterns:**
*   `*.g4` (for grammar context)
*   `examples/**/*.rs` (RegelSpraak source files for examples)
*   `examples/**/*.py` (Python scripts to run examples/simulations)

**Structure:**
*   Examples are organized in subdirectories within the `examples/` folder.
*   The `examples/toka/` directory contains the TOKA case implementation, including:
    *   `.rs` files: `toka_objecttypes.rs`, `toka_parameters.rs`, `toka_regels.rs`
    *   Python script: `run_toka_simulation.py` (demonstrates parsing and execution)

**Example 1: Object Type Definition (Ref: ยง3.9) - Grammar Test Snippet**

*RegelSpraak Snippet (for grammar focus):*
```regelspraak
Objecttype de Natuurlijk persoon (mv: Natuurlijke personen) (bezield)
    is minderjarig kenmerk (bijvoeglijk);
    de leeftijd Numeriek (niet-negatief geheel getal) met eenheid jr;
```

**Example 2: TOKA Case (Execution Demo) - Found in `examples/toka/`**

*   Contains multiple `.rs` files defining the necessary `Objecttype`, `Parameter`, and `Regel` constructs for the TOKA tax calculation.
*   The `run_toka_simulation.py` script demonstrates how to:
    1.  Load and parse the TOKA `.rs` files using the `RegelSpraakParser`.
    2.  Convert the parse tree into the structured datamodel (`src/regelspraak/model.py`).
    3.  Define sample input data (e.g., a person and a flight).
    4.  Instantiate and run the `Interpreter` (`src/regelspraak_engine/interpreter.py`) with the parsed rules and input data.
    5.  Display the simulation results (e.g., calculated tax).